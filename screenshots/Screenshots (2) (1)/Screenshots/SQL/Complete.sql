EXEC sp_configure 'show advanced options', 1;
RECONFIGURE;
EXEC sp_configure 'Ad Hoc Distributed Queries', 1;
RECONFIGURE;
GO
--CREATE DATABASE FLEX;
--GO

USE FLEX;
DROP TABLE IF EXISTS FEEDBACK;
DROP TABLE IF EXISTS EVALUATION;
DROP TABLE IF EXISTS ATTENDANCE;
DROP TABLE IF EXISTS REGISTRATION;
DROP TABLE IF EXISTS SECTIONS;
DROP TABLE IF EXISTS MARKS;
DROP TABLE IF EXISTS ACADEMICS;
DROP TABLE IF EXISTS COORDINATORS;
DROP TABLE IF EXISTS FACULTY_COURSE;
DROP TABLE IF EXISTS FACULTY;
DROP TABLE IF EXISTS COURSES;
DROP TABLE IF EXISTS STUDENTS;
DROP TABLE IF EXISTS USERS;


USE FLEX;
DROP TABLE IF EXISTS USERS;
CREATE TABLE USERS
(
USERID INT PRIMARY KEY,
USERNAME VARCHAR(50) UNIQUE,
USER_PASSWORD VARCHAR(100) NOT NULL
CHECK (LEN(USER_PASSWORD) >= 8
AND USER_PASSWORD LIKE '%[a-z]%'
AND USER_PASSWORD LIKE '%[A-Z]%'
AND USER_PASSWORD LIKE '%[0-9]%')
);

DROP TABLE IF EXISTS STUDENTS;
CREATE TABLE STUDENTS
(
USERID INT NOT NULL,
REG_NUM INT UNIQUE,
CNIC CHAR(14) NOT NULL CHECK (CNIC LIKE '[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]'),
PHONE_NUM VARCHAR(12) NOT NULL,
F_NAME VARCHAR(50) NOT NULL,
L_NAME VARCHAR(50),
BLOOD_GROUP VARCHAR(3) NOT NULL
CHECK (BLOOD_GROUP IN ('A+', 'A-', 'B+', 'B-', 'O+', 'O-', 'AB+', 'AB-')),
HOUSE_NO VARCHAR(20),
STREET_NO VARCHAR(50),
LOC_AREA VARCHAR(50),
PROG_NAME VARCHAR(10) NOT NULL,

PRIMARY KEY(REG_NUM),
FOREIGN KEY (USERID) REFERENCES USERS(USERID)
);

DROP TABLE IF EXISTS COURSES;
CREATE TABLE COURSES
(
COURSE_CODE VARCHAR(10) PRIMARY KEY NOT NULL,
COURSE_NAME VARCHAR(50) NOT NULL,
CRED_HRS FLOAT NOT NULL,
PRE_REQ_ID VARCHAR(10) NULL,

FOREIGN KEY (PRE_REQ_ID) REFERENCES COURSES(COURSE_CODE) --RECURSIVE RELATIONSHIP
);

USE FLEX;
DROP TABLE IF EXISTS FACULTY;
CREATE TABLE FACULTY
(
USERID INT,
FACULTY_ID INT PRIMARY KEY,
F_NAME VARCHAR(50) NOT NULL,
L_NAME VARCHAR(50),
FOREIGN KEY (USERID) REFERENCES USERS(USERID)
);

USE FLEX;
DROP TABLE IF EXISTS FACULTY_COURSE;
CREATE TABLE FACULTY_COURSE
(
FACULTY_ID INT,
COURSE_CODE VARCHAR(10),

PRIMARY KEY(FACULTY_ID, COURSE_CODE),
FOREIGN KEY (FACULTY_ID) REFERENCES FACULTY(FACULTY_ID),
FOREIGN KEY (COURSE_CODE) REFERENCES COURSES(COURSE_CODE)
);

use flex;
DROP TABLE IF EXISTS COORDINATORS;
CREATE TABLE COORDINATORS
(
COD INT PRIMARY KEY,
FAC_ID INT,
COURSE_CODE VARCHAR(10),

FOREIGN KEY (FAC_ID) REFERENCES FACULTY(FACULTY_ID),
FOREIGN KEY (COURSE_CODE) REFERENCES COURSES(COURSE_CODE)
);

use flex;
DROP TABLE IF EXISTS ACADEMICS;
CREATE TABLE ACADEMICS
(
ACD_ID INT PRIMARY KEY,
USERID INT,
F_NAME VARCHAR(50) NOT NULL,
L_NAME VARCHAR(50),
ACAD_LOC VARCHAR(10) NOT NULL, 
FOREIGN KEY (USERID) REFERENCES USERS(USERID)
);

USE FLEX;
DROP TABLE IF EXISTS MARKS;
CREATE TABLE MARKS
(
REG_NUM INT,
COURSE_CODE VARCHAR(10),
MARKS FLOAT NOT NULL,

PRIMARY KEY (REG_NUM, COURSE_CODE),
FOREIGN KEY (REG_NUM) REFERENCES STUDENTS(REG_NUM),
FOREIGN KEY (COURSE_CODE) REFERENCES COURSES(COURSE_CODE)
);

USE FLEX;
DROP TABLE IF EXISTS SECTIONS;
CREATE TABLE SECTIONS
(
SECTION_ID INT PRIMARY KEY,
CAPACITY INT NOT NULL,
SECTION_NAME VARCHAR(10) NOT NULL,
OFFERED_COURSE_CODE VARCHAR(10) NOT NULL,
FACULTY_ID INT NOT NULL,

FOREIGN KEY (OFFERED_COURSE_CODE) REFERENCES COURSES(COURSE_CODE),
FOREIGN KEY (FACULTY_ID) REFERENCES FACULTY(FACULTY_ID)
);

USE FLEX;
DROP TABLE IF EXISTS ATTENDENCE;
CREATE TABLE ATTENDANCE
(
SECTION_ID INT,
COURSE_CODE VARCHAR(10), 
STUDENT_ID INT,
DATE_TIME DATETIME NOT NULL,
A_STATUS VARCHAR(10) NOT NULL
CHECK (A_STATUS LIKE 'P'
OR A_STATUS LIKE 'L'
OR A_STATUS LIKE 'A'),

PRIMARY KEY(SECTION_ID, COURSE_CODE, STUDENT_ID, DATE_TIME),
FOREIGN KEY (SECTION_ID) REFERENCES SECTIONS(SECTION_ID),
FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS(REG_NUM),
FOREIGN KEY (COURSE_CODE) REFERENCES COURSES(COURSE_CODE)
);

use flex;
DROP TABLE IF EXISTS REGISTRATION;
CREATE TABLE REGISTRATION
(
 ID INT IDENTITY(1,1) PRIMARY KEY,
SECTION_ID INT,
REG_NUM INT,
REG_YEAR VARCHAR(10),

FOREIGN KEY (SECTION_ID) REFERENCES SECTIONS(SECTION_ID),
FOREIGN KEY (REG_NUM) REFERENCES STUDENTS(REG_NUM)
);

DROP TABLE IF EXISTS FEEDBACK;
CREATE TABLE FEEDBACK
(
FAC_ID INT,
REG_NUM INT,
COURSE_CODE VARCHAR(10),
COMMENT VARCHAR(1000),

PRIMARY KEY (FAC_ID, REG_NUM, COURSE_CODE),
FOREIGN KEY (FAC_ID) REFERENCES FACULTY(FACULTY_ID),
FOREIGN KEY (REG_NUM) REFERENCES STUDENTS(REG_NUM),
FOREIGN KEY (COURSE_CODE) REFERENCES COURSES(COURSE_CODE)
);


DROP TABLE IF EXISTS EVALUTATION;
CREATE TABLE EVALUATION
(
SECTION_ID INT,
COURSE_CODE VARCHAR(10),
WEIGHTAGE FLOAT,
E_TYPE VARCHAR(20), --SESSIONAL, FINAL
E_STATUS VARCHAR(20),

PRIMARY KEY (SECTION_ID, COURSE_CODE),
FOREIGN KEY (SECTION_ID) REFERENCES SECTIONS(SECTION_ID),
FOREIGN KEY (COURSE_CODE) REFERENCES COURSES(COURSE_CODE)
);
 
GO

USE FLEX;

DELETE FROM ACADEMICS;
DELETE FROM ATTENDANCE;
DELETE FROM COORDINATORS;
DELETE FROM COURSES;
DELETE FROM EVALUATION;
DELETE FROM FACULTY;
DELETE FROM FACULTY_COURSE;
DELETE FROM FEEDBACK;
DELETE FROM MARKS;
DELETE FROM REGISTRATION;
DELETE FROM SECTIONS;
DELETE FROM STUDENTS;
DELETE FROM USERS;

USE FLEX;
DELETE FROM USERS;
--INSERT INTO ACADEMICS
BULK INSERT USERS
FROM 'C:\Users\khurr\Desktop\FAST\DBS\Proj\DB-Project\Insertion\insertion\insertion\Data\users.csv'
WITH
(
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2 -- Skip the header row
);

USE FLEX;
DELETE FROM STUDENTS;
--INSERT INTO STUDENTS
BULK INSERT STUDENTS
FROM 'C:\Users\khurr\Desktop\FAST\DBS\Proj\DB-Project\Insertion\insertion\insertion\Data\students.csv'
WITH
(
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2 -- Skip the header row
);

USE FLEX;
DELETE FROM COURSES;
--INSERT INTO COURSES
BULK INSERT COURSES
FROM 'C:\Users\khurr\Desktop\FAST\DBS\Proj\DB-Project\Insertion\insertion\insertion\Data\courses.csv'
WITH
(
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2 -- Skip the header row
);

USE FLEX;
DELETE FROM FACULTY;
--INSERT INTO FACULTY
BULK INSERT FACULTY
FROM 'C:\Users\khurr\Desktop\FAST\DBS\Proj\DB-Project\Insertion\insertion\insertion\Data\faculty.csv'
WITH
(
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2 -- Skip the header row
);

USE FLEX;
DELETE FROM FACULTY_COURSE;
--INSERT INTO FACULTY
BULK INSERT FACULTY_COURSE
FROM 'C:\Users\khurr\Desktop\FAST\DBS\Proj\DB-Project\Insertion\insertion\insertion\Data\faculty_course.csv'
WITH
(
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2 -- Skip the header row
);

USE FLEX;
DELETE FROM COORDINATORS;
--INSERT INTO COORDINATORS
BULK INSERT COORDINATORS
FROM 'C:\Users\khurr\Desktop\FAST\DBS\Proj\DB-Project\Insertion\insertion\insertion\Data\coordinaters.csv'
WITH
(
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2 -- Skip the header row
);

USE FLEX;
DELETE FROM ACADEMICS;
--INSERT INTO ACADEMICS
BULK INSERT ACADEMICS
FROM 'C:\Users\khurr\Desktop\FAST\DBS\Proj\DB-Project\Insertion\insertion\insertion\Data\academics.csv'
WITH
(
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2 -- Skip the header row
);

USE FLEX;
DELETE FROM SECTIONS;
--INSERT INTO SECTIONS
BULK INSERT SECTIONS
FROM 'C:\Users\khurr\Desktop\FAST\DBS\Proj\DB-Project\Insertion\insertion\insertion\Data\sections.csv'
WITH
(
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2 -- Skip the header row
);

USE FLEX;
DELETE FROM REGISTRATION;
--INSERT INTO REGISTRATION
BULK INSERT REGISTRATION
FROM 'C:\Users\khurr\Desktop\FAST\DBS\Proj\DB-Project\Insertion\insertion\insertion\Data\registration.csv'
WITH
(
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2 -- Skip the header row
);

USE FLEX;
DELETE FROM ATTENDANCE;
--INSERT INTO ATTENDANCE
BULK INSERT ATTENDANCE
FROM 'C:\Users\khurr\Desktop\FAST\DBS\Proj\DB-Project\Insertion\insertion\insertion\Data\attendance.csv'
WITH
(
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2 -- Skip the header row
);

USE FLEX;
DELETE FROM MARKS;
--INSERT INTO MARKS
BULK INSERT MARKS
FROM 'C:\Users\khurr\Desktop\FAST\DBS\Proj\DB-Project\Insertion\insertion\insertion\Data\marks.csv'
WITH
(
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2 -- Skip the header row
);

USE FLEX;
DELETE FROM EVALUATION;
--INSERT INTO EVALUATION
BULK INSERT EVALUATION
FROM 'C:\Users\khurr\Desktop\FAST\DBS\Proj\DB-Project\Insertion\insertion\insertion\Data\evaluation.csv'
WITH
(
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2 -- Skip the header row
);

USE FLEX;
DELETE FROM FEEDBACK;
--INSERT INTO FEEDBACK
BULK INSERT FEEDBACK
FROM 'C:\Users\khurr\Desktop\FAST\DBS\Proj\DB-Project\Insertion\insertion\insertion\Data\feedback.csv'
WITH
(
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2 -- Skip the header row
);

GO
--SELECT * FROM ACADEMICS;
--SELECT * FROM ATTENDANCE;
--SELECT * FROM COORDINATORS;
--SELECT * FROM COURSES;
--SELECT * FROM EVALUATION;
--SELECT * FROM FACULTY;
--SELECT * FROM FACULTY_COURSE;
--SELECT * FROM FEEDBACK;
--SELECT * FROM MARKS;
--SELECT * FROM REGISTRATION;
--SELECT * FROM SECTIONS;
--SELECT * FROM STUDENTS;
--SELECT * FROM USERS;

GO
ALTER TABLE STUDENTS 
ADD STUDENT_NAME AS (F_NAME + ' ' + L_NAME);

ALTER TABLE FACULTY
ADD FACULTY_NAME AS (F_NAME + ' ' + L_NAME);

ALTER TABLE ACADEMICS 
ADD ACAD_NAME AS (F_NAME + ' ' + L_NAME);